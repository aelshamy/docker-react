name: CI


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
      - uses: actions/checkout@v2.3.3
      - name: Cache
        uses: actions/cache@v2.1.2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Installing NPM
        run: npm install
      - name: Building application
        run: npm run build

      - name: Generate deployment package
        run: zip -r deploy.zip * -x "**node_modules**"

      - name: Get timestamp
        uses: gerred/current-time@v1.0.0
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@v1.2
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'
#       - name: Build docker image
#         run: docker build -t aelshamy/docker-react .
#       - name: Run tests
#         run: docker run -e CI=true aelshamy/docker-react npm run test
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          region: "us-east-1"
          application_name: "docker-react"
          environment_name: "DockerReact-env"
          version_label: "my-app-${{ steps.format-time.outputs.replaced }}"
          deployment_package: deploy.zip
          
      - name: Deployed successfully!
        run: echo App deployed to ELB
